{"version":3,"file":"edit.min.js","sources":["../src/edit.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @package    mod_jazzquiz\n * @author     Sebastian S. Gundersen <sebastsg@stud.ntnu.no>\n * @copyright  2015 University of Wisconsin - Madison\n * @copyright  2018 NTNU\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function ($) {\n\n    /**\n     * Submit the question order to the server. An empty array will delete all questions.\n     * @param {Array.<number>} order\n     * @param {number} courseModuleId\n     */\n    function submitQuestionOrder(order, courseModuleId) {\n        $.post('edit.php', {\n            id: courseModuleId,\n            action: 'order',\n            order: JSON.stringify(order)\n        }, () => location.reload()); // TODO: Correct locally instead, but for now just refresh.\n    }\n\n    /**\n     * @returns {Array} The current question order.\n     */\n    function getQuestionOrder() {\n        let order = [];\n        $('.questionlist li').each(function () {\n            order.push($(this).data('question-id'));\n        });\n        return order;\n    }\n\n    /**\n     * Move a question up or down by a specified offset.\n     * @param {number} questionId\n     * @param {number} offset Negative to move down, positive to move up\n     * @returns {Array}\n     */\n    function offsetQuestion(questionId, offset) {\n        let order = getQuestionOrder();\n        let originalIndex = order.indexOf(questionId);\n        if (originalIndex === -1) {\n            return order;\n        }\n        for (let i = 0; i < order.length; i++) {\n            if (i + offset === originalIndex) {\n                order[originalIndex] = order[i];\n                order[i] = questionId;\n                break;\n            }\n        }\n        return order;\n    }\n\n    function listenAddToQuiz(courseModuleId) {\n        $('.jazzquiz-add-selected-questions').on('click', function () {\n            const $checkboxes = $('#categoryquestions td input[type=checkbox]:checked');\n            let questionIds = '';\n            for (const checkbox of $checkboxes) {\n                questionIds += checkbox.getAttribute('name').slice(1) + ',';\n            }\n            $.post('edit.php', {\n                id: courseModuleId,\n                action: 'addquestion',\n                questionids: questionIds,\n            }, () => location.reload());\n        });\n    }\n\n    return {\n        initialize: courseModuleId => {\n            $('.edit-question-action').on('click', function () {\n                const action = $(this).data('action');\n                const questionId = $(this).data('question-id');\n                let order = [];\n                switch (action) {\n                    case 'up':\n                        order = offsetQuestion(questionId, 1);\n                        break;\n                    case 'down':\n                        order = offsetQuestion(questionId, -1);\n                        break;\n                    case 'delete':\n                        order = getQuestionOrder();\n                        const index = order.indexOf(questionId);\n                        if (index !== -1) {\n                            order.splice(index, 1);\n                        }\n                        break;\n                    default:\n                        return;\n                }\n                submitQuestionOrder(order, courseModuleId);\n            });\n            let questionList = document.getElementsByClassName('questionlist')[0];\n            Sortable.create(questionList, {\n                handle: '.dragquestion',\n                onSort: () => submitQuestionOrder(getQuestionOrder(), courseModuleId)\n            });\n            listenAddToQuiz(courseModuleId);\n        }\n    };\n\n});\n"],"names":["define","$","submitQuestionOrder","order","courseModuleId","post","id","action","JSON","stringify","location","reload","getQuestionOrder","each","push","this","data","offsetQuestion","questionId","offset","originalIndex","indexOf","i","length","initialize","on","index","splice","questionList","document","getElementsByClassName","Sortable","create","handle","onSort","$checkboxes","questionIds","checkbox","getAttribute","slice","questionids","listenAddToQuiz"],"mappings":";;;;;;;AAuBAA,2BAAO,CAAC,WAAW,SAAUC,YAOhBC,oBAAoBC,MAAOC,gBAChCH,EAAEI,KAAK,WAAY,CACfC,GAAIF,eACJG,OAAQ,QACRJ,MAAOK,KAAKC,UAAUN,SACvB,IAAMO,SAASC,oBAMbC,uBACDT,MAAQ,UACZF,EAAE,oBAAoBY,MAAK,WACvBV,MAAMW,KAAKb,EAAEc,MAAMC,KAAK,mBAErBb,eASFc,eAAeC,WAAYC,YAC5BhB,MAAQS,mBACRQ,cAAgBjB,MAAMkB,QAAQH,gBACX,IAAnBE,qBACOjB,UAEN,IAAImB,EAAI,EAAGA,EAAInB,MAAMoB,OAAQD,OAC1BA,EAAIH,SAAWC,cAAe,CAC9BjB,MAAMiB,eAAiBjB,MAAMmB,GAC7BnB,MAAMmB,GAAKJ,wBAIZf,YAkBJ,CACHqB,WAAYpB,iBACRH,EAAE,yBAAyBwB,GAAG,SAAS,iBAC7BlB,OAASN,EAAEc,MAAMC,KAAK,UACtBE,WAAajB,EAAEc,MAAMC,KAAK,mBAC5Bb,MAAQ,UACJI,YACC,KACDJ,MAAQc,eAAeC,WAAY,aAElC,OACDf,MAAQc,eAAeC,YAAa,aAEnC,SACDf,MAAQS,yBACFc,MAAQvB,MAAMkB,QAAQH,aACb,IAAXQ,OACAvB,MAAMwB,OAAOD,MAAO,wBAMhCxB,oBAAoBC,MAAOC,uBAE3BwB,aAAeC,SAASC,uBAAuB,gBAAgB,GACnEC,SAASC,OAAOJ,aAAc,CAC1BK,OAAQ,gBACRC,OAAQ,IAAMhC,oBAAoBU,mBAAoBR,2BA3CzCA,gBACrBH,EAAE,oCAAoCwB,GAAG,SAAS,iBACxCU,YAAclC,EAAE,0DAClBmC,YAAc,OACb,MAAMC,YAAYF,YACnBC,aAAeC,SAASC,aAAa,QAAQC,MAAM,GAAK,IAE5DtC,EAAEI,KAAK,WAAY,CACfC,GAAIF,eACJG,OAAQ,cACRiC,YAAaJ,cACd,IAAM1B,SAASC,cAkClB8B,CAAgBrC"}